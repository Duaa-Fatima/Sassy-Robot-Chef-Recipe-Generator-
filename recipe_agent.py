# -*- coding: utf-8 -*-
"""recipe-agent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10URxmK_XCiOEveeGbdGvTPDePMFxIgcq
"""

!pip install -q langchain transformers accelerate sentencepiece huggingface_hub
!pip install langchain_community
!pip install gradio

import gradio as gr
from transformers import pipeline, AutoTokenizer, AutoModelForCausalLM
from langchain_community.llms import HuggingFacePipeline

from huggingface_hub import login

HUGGINGFACE_TOKEN = "----"  # üî¥ Replace this with your real token
login(HUGGINGFACE_TOKEN)

from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline
from langchain_community.llms import HuggingFacePipeline
import torch

model_id = "openchat/openchat-3.5-0106"

tokenizer = AutoTokenizer.from_pretrained(model_id)
model = AutoModelForCausalLM.from_pretrained(
    model_id,
    torch_dtype=torch.bfloat16 if torch.cuda.is_available() else torch.float32,
    device_map="auto"
)
model.eval()

# Sassy recipe bot logic
def sassy_recipe_bot(ingredients):
    prompt = f"""<|system|>
You're a bold, sassy robot chef. For any given list of ingredients, you:
1. Lightly roast the user's choices with humor and sarcasm.
2. Suggest a quirky, over-the-top dish.
3. Present the recipe in well-formatted bullet points.
Keep it short, fun, and a little dramatic. Never be boring!

<|user|>
Hey sassy robot chef, I have {ingredients}. What should I make?

<|assistant|>
"""

    inputs = tokenizer(prompt, return_tensors="pt").to(model.device)

    output = model.generate(
        **inputs,
        max_new_tokens=512,
        do_sample=True,
        temperature=1.2,
        top_p=0.95,
        pad_token_id=tokenizer.eos_token_id
    )

    decoded = tokenizer.decode(output[0], skip_special_tokens=True)

    # Extract the assistant's reply only
    if "<|assistant|>" in decoded:
        response = decoded.split("<|assistant|>")[-1].strip()
    else:
        response = decoded.replace(prompt, "").strip()

    return response.replace("**", "")

# ‚úÖ Gradio UI with forced pink background
with gr.Blocks(css="""
    .main-container {
        background-color: pink !important;
        padding: 20px;
        min-height: 100vh;
    }
    h4 {
        color: black !important;
    }
""") as demo:
    with gr.Column(elem_classes=["main-container"]):
        gr.Markdown("## ü§ñüç≥ Sassy Robot Chef: Recipe Generator")
        gr.Markdown("<h4>Enter your ingredients below and prepare to be deliciously insulted!</h4>")

        input_box = gr.Textbox(label="Your Ingredients", placeholder="e.g., banana, milk, chocolate")
        output_box = gr.Textbox(label="Sassy Recipe", lines=12)

        btn = gr.Button("Cook Me Something Fun!")
        btn.click(fn=sassy_recipe_bot, inputs=input_box, outputs=output_box)

demo.launch(share=True, debug=True)



!pip freeze > requirements.txt

